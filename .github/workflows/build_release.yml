name: Build Release 
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: true
        default: '2021.12.03'
      release_name:
        description: 'Release Name'
        required: true
        default: '2021.12.03 "Chen" Release'
jobs:
  docker_build:
    needs: linux-build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Log in to the Container registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Current Time
      run: echo "DATE_TAG=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: build_packages/docker/Dockerfile
        push: true
        tags: |
          "dsistudio/dsistudio:chen-${{ env.DATE_TAG }}"
          dsistudio/dsistudio:latest
  linux-build:
    strategy:
      matrix:
        os: [ubuntu_2004,ubuntu_1804,ubuntu_1604,centos7]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: build_packages/${{ matrix.os }}/Dockerfile
        push: false
        outputs: dsi-studio
    - name: Packaging
      run: |
        zip -r dsi_studio_${{ matrix.os }}.zip dsi-studio
    - name: Create Release
      uses: ncipollo/release-action@v1.8.9
      with:
        allowUpdates: true
        artifacts: "*.zip"
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false
        
  macos-build:
    strategy:
      matrix:
        os: [macos-11,macos-10.15]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      CFLAGS: -Werror
    steps:
    - uses: actions/checkout@v1
    - name: Install Qt
      run: |
        brew update
        brew install qt5
    - name: Download TIPL and Atlases
      run: |
        git clone https://github.com/frankyeh/TIPL.git
        git clone https://github.com/frankyeh/DSI-Studio-atlas.git
        rm -fr DSI-Studio-atlas/.git
    - name: Build DSI Studio
      run: |
        mkdir -p build
        cd build
        export PATH="/usr/local/opt/qt@5/bin:$PATH" && export LDFLAGS="-L/usr/local/opt/qt@5/lib" && export CPPFLAGS="-I/usr/local/opt/qt@5/include" && export PKG_CONFIG_PATH="/usr/local/opt/qt@5/lib/pkgconfig"
        qmake ../dsi_studio.pro
        make
        cd ..
        
    - name: Packaging
      run: |
        mv other/* build/dsi_studio.app/Contents/MacOS/
        mv dsi_studio.icns build/dsi_studio.app/Contents/Resources/
        mv DSI-Studio-atlas build/dsi_studio.app/Contents/MacOS/atlas
        mv build/dsi_studio.app .
        /usr/local/opt/qt@5/bin/macdeployqt dsi_studio.app
        zip -r dsi_studio_${{ matrix.os }}.zip dsi_studio.app
    - name: Create Release
      uses: ncipollo/release-action@v1.8.9
      with:
        allowUpdates: true
        artifacts: "*.zip"
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false

  windows_build:
    strategy:
      matrix:
        os: [ windows-2019]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.12.0
        modules: qtcharts qtopengl    
    - name: Step To run on failure
      if: ${{ failure() }}
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.12.0
        modules: qtcharts qtopengl    
    - name: get TIPL and DSI Studio atlas
      run: |
        git clone https://github.com/frankyeh/TIPL.git
        git clone https://github.com/frankyeh/DSI-Studio-atlas.git        
    - name: Build DSI Studio
      run: |
        for /f "usebackq delims=#" %%a in (`"%programfiles(x86)%\Microsoft Visual Studio\Installer\vswhere" -latest -property installationPath`) do call "%%a\Common7\Tools\VsDevCmd.bat" -arch=x64
        mkdir -p build
        cd build
        qmake ../dsi_studio.pro 
        nmake
      shell: cmd

    - name: Packaging
      run: |
        mkdir dsi_studio_win
        move other\color_map dsi_studio_win   
        move other\device.txt dsi_studio_win   
        move other\LICENSE dsi_studio_win   
        move build\release\dsi_studio.exe dsi_studio_win
        windeployqt --no-angle --no-quick-import --no-translations --no-system-d3d-compiler --compiler-runtime --no-opengl-sw dsi_studio_win\dsi_studio.exe
        move DSI-Studio-atlas dsi_studio_win\atlas  

    - name: Download the SSL files
      uses: suisei-cn/actions-download-file@v1
      with:
        url: "https://indy.fulgan.com/SSL/openssl-1.0.2u-x64_86-win64.zip"
    - name: Download TinyFSL
      uses: suisei-cn/actions-download-file@v1
      with:
        url: "https://github.com/frankyeh/TinyFSL/releases/download/2021.12.03/tiny_fsl_win64.zip"
    - name: Extract zip files
      run: |
        7z e openssl-1.0.2u-x64_86-win64.zip
        move *.dll dsi_studio_win
        7z e tiny_fsl_win64.zip -odsi_studio_win\plugin
        rd dsi_studio_win\plugin\tiny_fsl
        del *.zip
    - name: Zip Release
      uses: TheDoctor0/zip-release@0.6.0
      with:
        filename: dsi_studio_win.zip
        exclusions: .git
        path: dsi_studio_win
    - name: Create Release
      uses: ncipollo/release-action@v1.8.9
      with:
        allowUpdates: true
        artifacts: "*.zip"
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false  
